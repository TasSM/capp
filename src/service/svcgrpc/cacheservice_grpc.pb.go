// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package svcgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ArrayBasedCacheClient is the client API for ArrayBasedCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArrayBasedCacheClient interface {
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	StoreMessage(ctx context.Context, in *AppendRecordRequest, opts ...grpc.CallOption) (*AppendRecordResponse, error)
	GetStatistics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatisticResponse, error)
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (ArrayBasedCache_GetRecordClient, error)
}

type arrayBasedCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewArrayBasedCacheClient(cc grpc.ClientConnInterface) ArrayBasedCacheClient {
	return &arrayBasedCacheClient{cc}
}

func (c *arrayBasedCacheClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, "/service.ArrayBasedCache/CreateRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arrayBasedCacheClient) StoreMessage(ctx context.Context, in *AppendRecordRequest, opts ...grpc.CallOption) (*AppendRecordResponse, error) {
	out := new(AppendRecordResponse)
	err := c.cc.Invoke(ctx, "/service.ArrayBasedCache/StoreMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arrayBasedCacheClient) GetStatistics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatisticResponse, error) {
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, "/service.ArrayBasedCache/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arrayBasedCacheClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (ArrayBasedCache_GetRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ArrayBasedCache_serviceDesc.Streams[0], "/service.ArrayBasedCache/GetRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &arrayBasedCacheGetRecordClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArrayBasedCache_GetRecordClient interface {
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type arrayBasedCacheGetRecordClient struct {
	grpc.ClientStream
}

func (x *arrayBasedCacheGetRecordClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArrayBasedCacheServer is the server API for ArrayBasedCache service.
// All implementations must embed UnimplementedArrayBasedCacheServer
// for forward compatibility
type ArrayBasedCacheServer interface {
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	StoreMessage(context.Context, *AppendRecordRequest) (*AppendRecordResponse, error)
	GetStatistics(context.Context, *Empty) (*StatisticResponse, error)
	GetRecord(*GetRecordRequest, ArrayBasedCache_GetRecordServer) error
	mustEmbedUnimplementedArrayBasedCacheServer()
}

// UnimplementedArrayBasedCacheServer must be embedded to have forward compatible implementations.
type UnimplementedArrayBasedCacheServer struct {
}

func (UnimplementedArrayBasedCacheServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedArrayBasedCacheServer) StoreMessage(context.Context, *AppendRecordRequest) (*AppendRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMessage not implemented")
}
func (UnimplementedArrayBasedCacheServer) GetStatistics(context.Context, *Empty) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedArrayBasedCacheServer) GetRecord(*GetRecordRequest, ArrayBasedCache_GetRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedArrayBasedCacheServer) mustEmbedUnimplementedArrayBasedCacheServer() {}

// UnsafeArrayBasedCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArrayBasedCacheServer will
// result in compilation errors.
type UnsafeArrayBasedCacheServer interface {
	mustEmbedUnimplementedArrayBasedCacheServer()
}

func RegisterArrayBasedCacheServer(s *grpc.Server, srv ArrayBasedCacheServer) {
	s.RegisterService(&_ArrayBasedCache_serviceDesc, srv)
}

func _ArrayBasedCache_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayBasedCacheServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArrayBasedCache/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayBasedCacheServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArrayBasedCache_StoreMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayBasedCacheServer).StoreMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArrayBasedCache/StoreMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayBasedCacheServer).StoreMessage(ctx, req.(*AppendRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArrayBasedCache_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArrayBasedCacheServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArrayBasedCache/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArrayBasedCacheServer).GetStatistics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArrayBasedCache_GetRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArrayBasedCacheServer).GetRecord(m, &arrayBasedCacheGetRecordServer{stream})
}

type ArrayBasedCache_GetRecordServer interface {
	Send(*MessageResponse) error
	grpc.ServerStream
}

type arrayBasedCacheGetRecordServer struct {
	grpc.ServerStream
}

func (x *arrayBasedCacheGetRecordServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ArrayBasedCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ArrayBasedCache",
	HandlerType: (*ArrayBasedCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _ArrayBasedCache_CreateRecord_Handler,
		},
		{
			MethodName: "StoreMessage",
			Handler:    _ArrayBasedCache_StoreMessage_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _ArrayBasedCache_GetStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRecord",
			Handler:       _ArrayBasedCache_GetRecord_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cacheservice.proto",
}
